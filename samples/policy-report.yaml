apiVersion: v1
items:
- apiVersion: wgpolicyk8s.io/v1alpha1
  kind: PolicyReport
  metadata:
    creationTimestamp: "2021-04-08T11:44:57Z"
    generation: 1
    managedFields:
    - apiVersion: wgpolicyk8s.io/v1alpha1
      fieldsType: FieldsV1
      fieldsV1:
        f:results: {}
        f:summary:
          .: {}
          f:error: {}
          f:fail: {}
          f:pass: {}
          f:skip: {}
          f:warn: {}
      manager: policy-report-prototype
      operation: Update
      time: "2021-04-08T11:44:57Z"
    name: cis-dummy-policy
    namespace: default
    resourceVersion: "16826"
    uid: 3a4b4f5d-a362-487b-a500-1cdbf197e230
  results:
  - category: Master Node Configuration Files
    message: Ensure that the API server pod specification file permissions are set
      to 644 or more restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-apiserver.yaml;
        then stat -c permissions=%a /etc/kubernetes/manifests/kube-apiserver.yaml;
        fi'
      expected_result: '''permissions'' is present'
      index: 1.1.1
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the
        master node.
        For example, chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the
        master node.
        For example, chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the API server pod specification file ownership is set to
      root:root (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-apiserver.yaml;
        then stat -c %U:%G /etc/kubernetes/manifests/kube-apiserver.yaml; fi'
      expected_result: '''root:root'' is present'
      index: 1.1.2
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/kube-apiserver.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/kube-apiserver.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the controller manager pod specification file permissions
      are set to 644 or more restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-controller-manager.yaml;
        then stat -c permissions=%a /etc/kubernetes/manifests/kube-controller-manager.yaml;
        fi'
      expected_result: '''permissions'' is present'
      index: 1.1.3
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the controller manager pod specification file ownership is
      set to root:root (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-controller-manager.yaml;
        then stat -c %U:%G /etc/kubernetes/manifests/kube-controller-manager.yaml;
        fi'
      expected_result: '''root:root'' is present'
      index: 1.1.4
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the scheduler pod specification file permissions are set
      to 644 or more restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-scheduler.yaml;
        then stat -c permissions=%a /etc/kubernetes/manifests/kube-scheduler.yaml;
        fi'
      expected_result: '''permissions'' is present'
      index: 1.1.5
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the scheduler pod specification file ownership is set to
      root:root (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-scheduler.yaml;
        then stat -c %U:%G /etc/kubernetes/manifests/kube-scheduler.yaml; fi'
      expected_result: '''root:root'' is present'
      index: 1.1.6
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/kube-scheduler.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/kube-scheduler.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the etcd pod specification file permissions are set to 644
      or more restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "true"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/etcd.yaml; then find
        /etc/kubernetes/manifests/etcd.yaml -name '*etcd*' | xargs stat -c permissions=%a;
        fi'
      expected_result: '''permissions'' is present'
      index: 1.1.7
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/manifests/etcd.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/manifests/etcd.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the etcd pod specification file ownership is set to root:root
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "true"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/manifests/etcd.yaml; then find
        /etc/kubernetes/manifests/etcd.yaml -name '*etcd*' | xargs stat -c %U:%G;
        fi'
      expected_result: '''root:root'' is present'
      index: 1.1.8
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/etcd.yaml
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/manifests/etcd.yaml
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the Container Network Interface file permissions are set
      to 644 or more restrictive (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: stat -c permissions=%a <path/to/cni/files>
      expected_result: ""
      index: 1.1.9
      reason: Test marked as a manual test
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 <path/to/cni/files>
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 <path/to/cni/files>
      type: manual
    result: warn
    rule: Master Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the Container Network Interface file ownership is set to
      root:root (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: stat -c %U:%G <path/to/cni/files>
      expected_result: ""
      index: 1.1.10
      reason: Test marked as a manual test
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root <path/to/cni/files>
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root <path/to/cni/files>
      type: manual
    result: warn
    rule: Master Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the etcd data directory permissions are set to 700 or more
      restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ps -ef | grep etcd | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%'
        | xargs stat -c permissions=%a
      expected_result: ""
      index: 1.1.11
      reason: 'failed to run: "ps -ef | grep etcd | grep -- --data-dir | sed ''s%.*data-dir[=
        ]\\([^ ]*\\).*%\\1%'' | xargs stat -c permissions=%a", output: "stat: cannot
        stat ''/var/lib/etcd'': No such file or directory\n", error: exit status 123'
      remediation: |
        On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
        from the below command:
        ps -ef | grep etcd
        Run the below command (based on the etcd data directory found above). For example,
        chmod 700 /var/lib/etcd
      test_info: |
        On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
        from the below command:
        ps -ef | grep etcd
        Run the below command (based on the etcd data directory found above). For example,
        chmod 700 /var/lib/etcd
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the etcd data directory ownership is set to etcd:etcd (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ps -ef | grep etcd | grep -- --data-dir | sed 's%.*data-dir[= ]\([^ ]*\).*%\1%'
        | xargs stat -c %U:%G
      expected_result: ""
      index: 1.1.12
      reason: 'failed to run: "ps -ef | grep etcd | grep -- --data-dir | sed ''s%.*data-dir[=
        ]\\([^ ]*\\).*%\\1%'' | xargs stat -c %U:%G", output: "stat: cannot stat ''/var/lib/etcd'':
        No such file or directory\n", error: exit status 123'
      remediation: |
        On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
        from the below command:
        ps -ef | grep etcd
        Run the below command (based on the etcd data directory found above).
        For example, chown etcd:etcd /var/lib/etcd
      test_info: |
        On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
        from the below command:
        ps -ef | grep etcd
        Run the below command (based on the etcd data directory found above).
        For example, chown etcd:etcd /var/lib/etcd
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the admin.conf file permissions are set to 644 or more restrictive
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c permissions=%a
        /etc/kubernetes/admin.conf; fi'
      expected_result: '''permissions'' is present'
      index: 1.1.13
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/admin.conf
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/admin.conf
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the admin.conf file ownership is set to root:root (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G
        /etc/kubernetes/admin.conf; fi'
      expected_result: '''root:root'' is present'
      index: 1.1.14
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/admin.conf
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/admin.conf
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the scheduler.conf file permissions are set to 644 or more
      restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c permissions=%a
        /etc/kubernetes/scheduler.conf; fi'
      expected_result: '''permissions'' is present'
      index: 1.1.15
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/scheduler.conf
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/scheduler.conf
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the scheduler.conf file ownership is set to root:root (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c %U:%G
        /etc/kubernetes/scheduler.conf; fi'
      expected_result: '''root:root'' is present'
      index: 1.1.16
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/scheduler.conf
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/scheduler.conf
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the controller-manager.conf file permissions are set to 644
      or more restrictive (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then
        stat -c permissions=%a /etc/kubernetes/controller-manager.conf; fi'
      expected_result: '''permissions'' is present'
      index: 1.1.17
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/controller-manager.conf
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod 644 /etc/kubernetes/controller-manager.conf
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the controller-manager.conf file ownership is set to root:root
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then
        stat -c %U:%G /etc/kubernetes/controller-manager.conf; fi'
      expected_result: '''root:root'' is present'
      index: 1.1.18
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/controller-manager.conf
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown root:root /etc/kubernetes/controller-manager.conf
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the Kubernetes PKI directory and file ownership is set to
      root:root (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "true"
      actual_value: ""
      audit: find /etc/kubernetes/pki/ | xargs stat -c %U:%G
      expected_result: ""
      index: 1.1.19
      reason: 'failed to run: "find /etc/kubernetes/pki/ | xargs stat -c %U:%G", output:
        "find: ‘/etc/kubernetes/pki/’: No such file or directory\nstat: missing operand\nTry
        ''stat --help'' for more information.\n", error: exit status 123'
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown -R root:root /etc/kubernetes/pki/
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chown -R root:root /etc/kubernetes/pki/
      type: ""
    result: fail
    rule: Master Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the Kubernetes PKI certificate file permissions are set to
      644 or more restrictive (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "true"
      actual_value: ""
      audit: find /etc/kubernetes/pki -name '*.crt' | xargs stat -c permissions=%a
      expected_result: ""
      index: 1.1.20
      reason: 'failed to run: "find /etc/kubernetes/pki -name ''*.crt'' | xargs stat
        -c permissions=%a", output: "find: ‘/etc/kubernetes/pki’: No such file or
        directory\nstat: missing operand\nTry ''stat --help'' for more information.\n",
        error: exit status 123'
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod -R 644 /etc/kubernetes/pki/*.crt
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod -R 644 /etc/kubernetes/pki/*.crt
      type: ""
    result: warn
    rule: Master Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Master Node Configuration Files
    message: Ensure that the Kubernetes PKI key file permissions are set to 600 (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "true"
      actual_value: ""
      audit: find /etc/kubernetes/pki -name '*.key' | xargs stat -c permissions=%a
      expected_result: ""
      index: 1.1.21
      reason: 'failed to run: "find /etc/kubernetes/pki -name ''*.key'' | xargs stat
        -c permissions=%a", output: "find: ‘/etc/kubernetes/pki’: No such file or
        directory\nstat: missing operand\nTry ''stat --help'' for more information.\n",
        error: exit status 123'
      remediation: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod -R 600 /etc/kubernetes/pki/*.key
      test_info: |
        Run the below command (based on the file location on your system) on the master node.
        For example,
        chmod -R 600 /etc/kubernetes/pki/*.key
      type: ""
    result: warn
    rule: Master Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --anonymous-auth argument is set to false (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--anonymous-auth'' is present'
      index: 1.2.1
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --anonymous-auth=false
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --anonymous-auth=false
      type: ""
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --basic-auth-file argument is not set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--basic-auth-file'' is not present'
      index: 1.2.2
      reason: ""
      remediation: |
        Follow the documentation and configure alternate mechanisms for authentication. Then,
        edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --basic-auth-file=<filename> parameter.
      test_info: |
        Follow the documentation and configure alternate mechanisms for authentication. Then,
        edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --basic-auth-file=<filename> parameter.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --token-auth-file parameter is not set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--token-auth-file'' is not present'
      index: 1.2.3
      reason: ""
      remediation: |
        Follow the documentation and configure alternate mechanisms for authentication. Then,
        edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --token-auth-file=<filename> parameter.
      test_info: |
        Follow the documentation and configure alternate mechanisms for authentication. Then,
        edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --token-auth-file=<filename> parameter.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --kubelet-https argument is set to true (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--kubelet-https'' is present OR ''--kubelet-https'' is not
        present'
      index: 1.2.4
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --kubelet-https parameter.
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --kubelet-https parameter.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --kubelet-client-certificate and --kubelet-client-key
      arguments are set as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--kubelet-client-certificate'' is present AND ''--kubelet-client-key''
        is present'
      index: 1.2.5
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and set up the TLS connection between the
        apiserver and kubelets. Then, edit API server pod specification file
        /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the
        kubelet client certificate and key parameters as below.
        --kubelet-client-certificate=<path/to/client-certificate-file>
        --kubelet-client-key=<path/to/client-key-file>
      test_info: |
        Follow the Kubernetes documentation and set up the TLS connection between the
        apiserver and kubelets. Then, edit API server pod specification file
        /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the
        kubelet client certificate and key parameters as below.
        --kubelet-client-certificate=<path/to/client-certificate-file>
        --kubelet-client-key=<path/to/client-key-file>
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --kubelet-certificate-authority argument is set as appropriate
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--kubelet-certificate-authority'' is present'
      index: 1.2.6
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and setup the TLS connection between
        the apiserver and kubelets. Then, edit the API server pod specification file
        /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the
        --kubelet-certificate-authority parameter to the path to the cert file for the certificate authority.
        --kubelet-certificate-authority=<ca-string>
      test_info: |
        Follow the Kubernetes documentation and setup the TLS connection between
        the apiserver and kubelets. Then, edit the API server pod specification file
        /etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the
        --kubelet-certificate-authority parameter to the path to the cert file for the certificate authority.
        --kubelet-certificate-authority=<ca-string>
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --authorization-mode argument is not set to AlwaysAllow
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--authorization-mode'' does not have ''AlwaysAllow'''
      index: 1.2.7
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --authorization-mode parameter to values other than AlwaysAllow.
        One such example could be as below.
        --authorization-mode=RBAC
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --authorization-mode parameter to values other than AlwaysAllow.
        One such example could be as below.
        --authorization-mode=RBAC
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --authorization-mode argument includes Node (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--authorization-mode'' has ''Node'''
      index: 1.2.8
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --authorization-mode parameter to a value that includes Node.
        --authorization-mode=Node,RBAC
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --authorization-mode parameter to a value that includes Node.
        --authorization-mode=Node,RBAC
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --authorization-mode argument includes RBAC (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--authorization-mode'' has ''RBAC'''
      index: 1.2.9
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --authorization-mode parameter to a value that includes RBAC,
        for example:
        --authorization-mode=Node,RBAC
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --authorization-mode parameter to a value that includes RBAC,
        for example:
        --authorization-mode=Node,RBAC
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin EventRateLimit is set (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--enable-admission-plugins'' has ''EventRateLimit'''
      index: 1.2.10
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and set the desired limits in a configuration file.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        and set the below parameters.
        --enable-admission-plugins=...,EventRateLimit,...
        --admission-control-config-file=<path/to/configuration/file>
      test_info: |
        Follow the Kubernetes documentation and set the desired limits in a configuration file.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        and set the below parameters.
        --enable-admission-plugins=...,EventRateLimit,...
        --admission-control-config-file=<path/to/configuration/file>
      type: ""
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin AlwaysAdmit is not set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--enable-admission-plugins'' does not have ''AlwaysAdmit''
        OR ''--enable-admission-plugins'' is not present'
      index: 1.2.11
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and either remove the --enable-admission-plugins parameter, or set it to a
        value that does not include AlwaysAdmit.
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and either remove the --enable-admission-plugins parameter, or set it to a
        value that does not include AlwaysAdmit.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin AlwaysPullImages is set (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--enable-admission-plugins'' has ''AlwaysPullImages'''
      index: 1.2.12
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to include
        AlwaysPullImages.
        --enable-admission-plugins=...,AlwaysPullImages,...
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to include
        AlwaysPullImages.
        --enable-admission-plugins=...,AlwaysPullImages,...
      type: ""
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin SecurityContextDeny is set if
      PodSecurityPolicy is not used (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--enable-admission-plugins'' has ''SecurityContextDeny''
        OR ''--enable-admission-plugins'' has ''PodSecurityPolicy'''
      index: 1.2.13
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to include
        SecurityContextDeny, unless PodSecurityPolicy is already in place.
        --enable-admission-plugins=...,SecurityContextDeny,...
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to include
        SecurityContextDeny, unless PodSecurityPolicy is already in place.
        --enable-admission-plugins=...,SecurityContextDeny,...
      type: ""
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin ServiceAccount is set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--disable-admission-plugins'' is present OR ''--disable-admission-plugins''
        is not present'
      index: 1.2.14
      reason: ""
      remediation: |
        Follow the documentation and create ServiceAccount objects as per your environment.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and ensure that the --disable-admission-plugins parameter is set to a
        value that does not include ServiceAccount.
      test_info: |
        Follow the documentation and create ServiceAccount objects as per your environment.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and ensure that the --disable-admission-plugins parameter is set to a
        value that does not include ServiceAccount.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin NamespaceLifecycle is set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--disable-admission-plugins'' is present OR ''--disable-admission-plugins''
        is not present'
      index: 1.2.15
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --disable-admission-plugins parameter to
        ensure it does not include NamespaceLifecycle.
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --disable-admission-plugins parameter to
        ensure it does not include NamespaceLifecycle.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin PodSecurityPolicy is set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--enable-admission-plugins'' has ''PodSecurityPolicy'''
      index: 1.2.16
      reason: ""
      remediation: |
        Follow the documentation and create Pod Security Policy objects as per your environment.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to a
        value that includes PodSecurityPolicy:
        --enable-admission-plugins=...,PodSecurityPolicy,...
        Then restart the API Server.
      test_info: |
        Follow the documentation and create Pod Security Policy objects as per your environment.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to a
        value that includes PodSecurityPolicy:
        --enable-admission-plugins=...,PodSecurityPolicy,...
        Then restart the API Server.
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the admission control plugin NodeRestriction is set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--enable-admission-plugins'' has ''NodeRestriction'''
      index: 1.2.17
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to a
        value that includes NodeRestriction.
        --enable-admission-plugins=...,NodeRestriction,...
      test_info: |
        Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --enable-admission-plugins parameter to a
        value that includes NodeRestriction.
        --enable-admission-plugins=...,NodeRestriction,...
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --insecure-bind-address argument is not set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--insecure-bind-address'' is not present'
      index: 1.2.18
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --insecure-bind-address parameter.
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and remove the --insecure-bind-address parameter.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --insecure-port argument is set to 0 (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--insecure-port'' is equal to ''0'''
      index: 1.2.19
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --insecure-port=0
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --insecure-port=0
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --secure-port argument is not set to 0 (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--secure-port'' is greater than 0 OR ''--secure-port'' is
        not present'
      index: 1.2.20
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and either remove the --secure-port parameter or
        set it to a different (non-zero) desired port.
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and either remove the --secure-port parameter or
        set it to a different (non-zero) desired port.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --profiling argument is set to false (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--profiling'' is present'
      index: 1.2.21
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --profiling=false
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --profiling=false
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --audit-log-path argument is set (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--audit-log-path'' is present'
      index: 1.2.22
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-path parameter to a suitable path and
        file where you would like audit logs to be written, for example:
        --audit-log-path=/var/log/apiserver/audit.log
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-path parameter to a suitable path and
        file where you would like audit logs to be written, for example:
        --audit-log-path=/var/log/apiserver/audit.log
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --audit-log-maxage argument is set to 30 or as appropriate
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--audit-log-maxage'' is present'
      index: 1.2.23
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:
        --audit-log-maxage=30
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:
        --audit-log-maxage=30
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--audit-log-maxbackup'' is present'
      index: 1.2.24
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate
        value.
        --audit-log-maxbackup=10
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate
        value.
        --audit-log-maxbackup=10
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--audit-log-maxsize'' is present'
      index: 1.2.25
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.
        For example, to set it as 100 MB:
        --audit-log-maxsize=100
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.
        For example, to set it as 100 MB:
        --audit-log-maxsize=100
      type: ""
    result: fail
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --request-timeout argument is set as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--request-timeout'' is not present OR ''--request-timeout''
        is present'
      index: 1.2.26
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        and set the below parameter as appropriate and if needed.
        For example,
        --request-timeout=300s
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        and set the below parameter as appropriate and if needed.
        For example,
        --request-timeout=300s
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --service-account-lookup argument is set to true (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--service-account-lookup'' is not present OR ''--service-account-lookup''
        is present'
      index: 1.2.27
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --service-account-lookup=true
        Alternatively, you can delete the --service-account-lookup parameter from this file so
        that the default takes effect.
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --service-account-lookup=true
        Alternatively, you can delete the --service-account-lookup parameter from this file so
        that the default takes effect.
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --service-account-key-file argument is set as appropriate
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--service-account-key-file'' is present'
      index: 1.2.28
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --service-account-key-file parameter
        to the public key file for service accounts:
        --service-account-key-file=<filename>
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --service-account-key-file parameter
        to the public key file for service accounts:
        --service-account-key-file=<filename>
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --etcd-certfile and --etcd-keyfile arguments are set
      as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--etcd-certfile'' is present AND ''--etcd-keyfile'' is present'
      index: 1.2.29
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the etcd certificate and key file parameters.
        --etcd-certfile=<path/to/client-certificate-file>
        --etcd-keyfile=<path/to/client-key-file>
      test_info: |
        Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the etcd certificate and key file parameters.
        --etcd-certfile=<path/to/client-certificate-file>
        --etcd-keyfile=<path/to/client-key-file>
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --tls-cert-file and --tls-private-key-file arguments
      are set as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--tls-cert-file'' is present AND ''--tls-private-key-file''
        is present'
      index: 1.2.30
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the TLS certificate and private key file parameters.
        --tls-cert-file=<path/to/tls-certificate-file>
        --tls-private-key-file=<path/to/tls-key-file>
      test_info: |
        Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the TLS certificate and private key file parameters.
        --tls-cert-file=<path/to/tls-certificate-file>
        --tls-private-key-file=<path/to/tls-key-file>
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --client-ca-file argument is set as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--client-ca-file'' is present'
      index: 1.2.31
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the client certificate authority file.
        --client-ca-file=<path/to/client-ca-file>
      test_info: |
        Follow the Kubernetes documentation and set up the TLS connection on the apiserver.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the client certificate authority file.
        --client-ca-file=<path/to/client-ca-file>
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --etcd-cafile argument is set as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--etcd-cafile'' is present'
      index: 1.2.32
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the etcd certificate authority file parameter.
        --etcd-cafile=<path/to/ca-file>
      test_info: |
        Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the etcd certificate authority file parameter.
        --etcd-cafile=<path/to/ca-file>
      type: ""
    result: pass
    rule: API Server
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the --encryption-provider-config argument is set as appropriate
      (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--encryption-provider-config'' is present'
      index: 1.2.33
      reason: ""
      remediation: |
        Follow the Kubernetes documentation and configure a EncryptionConfig file.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>
      test_info: |
        Follow the Kubernetes documentation and configure a EncryptionConfig file.
        Then, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>
      type: ""
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that encryption providers are appropriately configured (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: ""
      index: 1.2.34
      reason: Test marked as a manual test
      remediation: |
        Follow the Kubernetes documentation and configure a EncryptionConfig file.
        In this file, choose aescbc, kms or secretbox as the encryption provider.
      test_info: |
        Follow the Kubernetes documentation and configure a EncryptionConfig file.
        In this file, choose aescbc, kms or secretbox as the encryption provider.
      type: manual
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: API Server
    message: Ensure that the API Server only makes use of Strong Cryptographic Ciphers
      (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--tls-cipher-suites'' is present'
      index: 1.2.35
      reason: ""
      remediation: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM
        _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM
        _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM
        _SHA384
      test_info: |
        Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml
        on the master node and set the below parameter.
        --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM
        _SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM
        _SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM
        _SHA384
      type: ""
    result: warn
    rule: API Server
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the --terminated-pod-gc-threshold argument is set as appropriate
      (Manual)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--terminated-pod-gc-threshold'' is present'
      index: 1.3.1
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --terminated-pod-gc-threshold to an appropriate threshold,
        for example:
        --terminated-pod-gc-threshold=10
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --terminated-pod-gc-threshold to an appropriate threshold,
        for example:
        --terminated-pod-gc-threshold=10
      type: ""
    result: warn
    rule: Controller Manager
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the --profiling argument is set to false (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--profiling'' is present'
      index: 1.3.2
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the below parameter.
        --profiling=false
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the below parameter.
        --profiling=false
      type: ""
    result: fail
    rule: Controller Manager
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the --use-service-account-credentials argument is set to
      true (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--use-service-account-credentials'' is not equal to ''false'''
      index: 1.3.3
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node to set the below parameter.
        --use-service-account-credentials=true
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node to set the below parameter.
        --use-service-account-credentials=true
      type: ""
    result: pass
    rule: Controller Manager
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the --service-account-private-key-file argument is set as
      appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--service-account-private-key-file'' is present'
      index: 1.3.4
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --service-account-private-key-file parameter
        to the private key file for service accounts.
        --service-account-private-key-file=<filename>
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --service-account-private-key-file parameter
        to the private key file for service accounts.
        --service-account-private-key-file=<filename>
      type: ""
    result: pass
    rule: Controller Manager
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the --root-ca-file argument is set as appropriate (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--root-ca-file'' is present'
      index: 1.3.5
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --root-ca-file parameter to the certificate bundle file`.
        --root-ca-file=<path/to/file>
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --root-ca-file parameter to the certificate bundle file`.
        --root-ca-file=<path/to/file>
      type: ""
    result: pass
    rule: Controller Manager
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the RotateKubeletServerCertificate argument is set to true
      (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--feature-gates'' is present OR ''--feature-gates'' is not
        present'
      index: 1.3.6
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
        --feature-gates=RotateKubeletServerCertificate=true
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
        --feature-gates=RotateKubeletServerCertificate=true
      type: ""
    result: pass
    rule: Controller Manager
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Controller Manager
    message: Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57438   57182  2 14:35 ?        00:03:32 kube-controller-manager
        --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf
        --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1
        --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kind
        --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key
        --controllers=*,bootstrapsigner,tokencleaner --enable-hostpath-provisioner=true
        --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0
        --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt
        --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --use-service-account-credentials=true
      audit: /bin/ps -ef | grep kube-controller | grep -v grep
      expected_result: '''--bind-address'' is equal to ''127.0.0.1'' OR ''--bind-address''
        is not present'
      index: 1.3.7
      reason: ""
      remediation: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and ensure the correct value for the --bind-address parameter
      test_info: |
        Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml
        on the master node and ensure the correct value for the --bind-address parameter
      type: ""
    result: pass
    rule: Controller Manager
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Scheduler
    message: Ensure that the --profiling argument is set to false (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57440   57263  0 14:35 ?        00:00:30 kube-scheduler
        --authentication-kubeconfig=/etc/kubernetes/scheduler.conf --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
        --bind-address=127.0.0.1 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true
        --port=0
      audit: /bin/ps -ef | grep kube-scheduler | grep -v grep
      expected_result: '''--profiling'' is present'
      index: 1.4.1
      reason: ""
      remediation: |
        Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml file
        on the master node and set the below parameter.
        --profiling=false
      test_info: |
        Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml file
        on the master node and set the below parameter.
        --profiling=false
      type: ""
    result: fail
    rule: Scheduler
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Scheduler
    message: Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)
    policy: Master Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57440   57263  0 14:35 ?        00:00:30 kube-scheduler
        --authentication-kubeconfig=/etc/kubernetes/scheduler.conf --authorization-kubeconfig=/etc/kubernetes/scheduler.conf
        --bind-address=127.0.0.1 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true
        --port=0
      audit: /bin/ps -ef | grep kube-scheduler | grep -v grep
      expected_result: '''--bind-address'' is equal to ''127.0.0.1'' OR ''--bind-address''
        is not present'
      index: 1.4.2
      reason: ""
      remediation: |
        Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml
        on the master node and ensure the correct value for the --bind-address parameter
      test_info: |
        Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml
        on the master node and ensure the correct value for the --bind-address parameter
      type: ""
    result: pass
    rule: Scheduler
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that the --cert-file and --key-file arguments are set as appropriate
      (Automated)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: |-
        root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
        root       57551   57202  1 14:35 ?        00:02:57 etcd --advertise-client-urls=https://172.18.0.2:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://172.18.0.2:2380 --initial-cluster=kind-control-plane=https://172.18.0.2:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://172.18.0.2:2380 --name=kind-control-plane --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''--cert-file'' is present AND ''--key-file'' is present'
      index: "2.1"
      reason: ""
      remediation: |
        Follow the etcd service documentation and configure TLS encryption.
        Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml
        on the master node and set the below parameters.
        --cert-file=</path/to/ca-file>
        --key-file=</path/to/key-file>
      test_info: |
        Follow the etcd service documentation and configure TLS encryption.
        Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml
        on the master node and set the below parameters.
        --cert-file=</path/to/ca-file>
        --key-file=</path/to/key-file>
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that the --client-cert-auth argument is set to true (Automated)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: |-
        root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
        root       57551   57202  1 14:35 ?        00:02:57 etcd --advertise-client-urls=https://172.18.0.2:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://172.18.0.2:2380 --initial-cluster=kind-control-plane=https://172.18.0.2:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://172.18.0.2:2380 --name=kind-control-plane --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''--client-cert-auth'' is equal to ''true'''
      index: "2.2"
      reason: ""
      remediation: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and set the below parameter.
        --client-cert-auth="true"
      test_info: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and set the below parameter.
        --client-cert-auth="true"
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that the --auto-tls argument is not set to true (Automated)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: 'cat: /proc/57551/environ: Permission denied'
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''ETCD_AUTO_TLS'' is not present OR ''ETCD_AUTO_TLS'' is present'
      index: "2.3"
      reason: ""
      remediation: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and either remove the --auto-tls parameter or set it to false.
          --auto-tls=false
      test_info: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and either remove the --auto-tls parameter or set it to false.
          --auto-tls=false
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that the --peer-cert-file and --peer-key-file arguments are set
      as appropriate (Automated)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: |-
        root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
        root       57551   57202  1 14:35 ?        00:02:57 etcd --advertise-client-urls=https://172.18.0.2:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://172.18.0.2:2380 --initial-cluster=kind-control-plane=https://172.18.0.2:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://172.18.0.2:2380 --name=kind-control-plane --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''--peer-cert-file'' is present AND ''--peer-key-file'' is
        present'
      index: "2.4"
      reason: ""
      remediation: |
        Follow the etcd service documentation and configure peer TLS encryption as appropriate
        for your etcd cluster.
        Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the
        master node and set the below parameters.
        --peer-client-file=</path/to/peer-cert-file>
        --peer-key-file=</path/to/peer-key-file>
      test_info: |
        Follow the etcd service documentation and configure peer TLS encryption as appropriate
        for your etcd cluster.
        Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the
        master node and set the below parameters.
        --peer-client-file=</path/to/peer-cert-file>
        --peer-key-file=</path/to/peer-key-file>
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that the --peer-client-cert-auth argument is set to true (Automated)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: |-
        root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
        root       57551   57202  1 14:35 ?        00:02:57 etcd --advertise-client-urls=https://172.18.0.2:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://172.18.0.2:2380 --initial-cluster=kind-control-plane=https://172.18.0.2:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://172.18.0.2:2380 --name=kind-control-plane --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''--peer-client-cert-auth'' is equal to ''true'''
      index: "2.5"
      reason: ""
      remediation: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and set the below parameter.
        --peer-client-cert-auth=true
      test_info: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and set the below parameter.
        --peer-client-cert-auth=true
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that the --peer-auto-tls argument is not set to true (Automated)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: 'cat: /proc/57551/environ: Permission denied'
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''ETCD_PEER_AUTO_TLS'' is not present OR ''ETCD_PEER_AUTO_TLS''
        is present'
      index: "2.6"
      reason: ""
      remediation: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and either remove the --peer-auto-tls parameter or set it to false.
        --peer-auto-tls=false
      test_info: |
        Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master
        node and either remove the --peer-auto-tls parameter or set it to false.
        --peer-auto-tls=false
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Etcd Node Configuration Files
    message: Ensure that a unique Certificate Authority is used for etcd (Manual)
    policy: Etcd Node Configuration
    properties:
      AuditConfig: ""
      AuditEnv: cat "/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ" | tr '\0'
        '\n'
      IsMultiple: "false"
      actual_value: |-
        root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
        root       57551   57202  1 14:35 ?        00:02:57 etcd --advertise-client-urls=https://172.18.0.2:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://172.18.0.2:2380 --initial-cluster=kind-control-plane=https://172.18.0.2:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://172.18.0.2:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://172.18.0.2:2380 --name=kind-control-plane --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt
      audit: /bin/ps -ef | /bin/grep etcd | /bin/grep -v grep
      expected_result: '''--trusted-ca-file'' is present'
      index: "2.7"
      reason: ""
      remediation: |
        [Manual test]
        Follow the etcd documentation and create a dedicated certificate authority setup for the
        etcd service.
        Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the
        master node and set the below parameter.
        --trusted-ca-file=</path/to/ca-file>
      test_info: |
        [Manual test]
        Follow the etcd documentation and create a dedicated certificate authority setup for the
        etcd service.
        Then, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the
        master node and set the below parameter.
        --trusted-ca-file=</path/to/ca-file>
      type: ""
    result: pass
    rule: Etcd Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Authentication and Authorization
    message: Client certificate authentication should not be used for users (Manual)
    policy: Control Plane Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 3.1.1
      reason: Test marked as a manual test
      remediation: |
        Alternative mechanisms provided by Kubernetes such as the use of OIDC should be
        implemented in place of client certificates.
      test_info: |
        Alternative mechanisms provided by Kubernetes such as the use of OIDC should be
        implemented in place of client certificates.
      type: manual
    result: warn
    rule: Authentication and Authorization
    timestamp:
      nanos: 0
      seconds: 0
  - category: Logging
    message: Ensure that a minimal audit policy is created (Manual)
    policy: Control Plane Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: root       57465   57232  6 14:35 ?        00:10:00 kube-apiserver
        --advertise-address=172.18.0.2 --allow-privileged=true --authorization-mode=Node,RBAC
        --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction
        --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt
        --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key
        --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt
        --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group
        --requestheader-username-headers=X-Remote-User --runtime-config= --secure-port=6443
        --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub
        --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/16
        --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key
      audit: /bin/ps -ef | grep kube-apiserver | grep -v grep
      expected_result: '''--audit-policy-file'' is present'
      index: 3.2.1
      reason: ""
      remediation: |
        Create an audit policy file for your cluster.
      test_info: |
        Create an audit policy file for your cluster.
      type: ""
    result: warn
    rule: Logging
    timestamp:
      nanos: 0
      seconds: 0
  - category: Logging
    message: Ensure that the audit policy covers key security concerns (Manual)
    policy: Control Plane Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 3.2.2
      reason: Test marked as a manual test
      remediation: |
        Consider modification of the audit policy in use on the cluster to include these items, at a
        minimum.
      test_info: |
        Consider modification of the audit policy in use on the cluster to include these items, at a
        minimum.
      type: manual
    result: warn
    rule: Logging
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the kubelet service file permissions are set to 644 or more
      restrictive (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /etc/systemd/system/kubelet.service.d/10-kubeadm.conf;
        then stat -c permissions=%a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf;
        fi'' '
      expected_result: '''permissions'' is present'
      index: 4.1.1
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      test_info: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chmod 644 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      type: ""
    result: fail
    rule: Worker Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the kubelet service file ownership is set to root:root (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /etc/systemd/system/kubelet.service.d/10-kubeadm.conf;
        then stat -c %U:%G /etc/systemd/system/kubelet.service.d/10-kubeadm.conf;
        fi'' '
      expected_result: '''root:root'' is present'
      index: 4.1.2
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      test_info: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      type: ""
    result: fail
    rule: Worker Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: If proxy kubeconfig file exists ensure permissions are set to 644 or
      more restrictive (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a
        /etc/kubernetes/proxy.conf; fi'' '
      expected_result: '''permissions'' is present OR ''/etc/kubernetes/proxy.conf''
        is not present'
      index: 4.1.3
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chmod 644 /etc/kubernetes/proxy.conf
      test_info: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chmod 644 /etc/kubernetes/proxy.conf
      type: ""
    result: pass
    rule: Worker Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the proxy kubeconfig file ownership is set to root:root (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G
        /etc/kubernetes/proxy.conf; fi'' '
      expected_result: '''root:root'' is present OR ''/etc/kubernetes/proxy.conf''
        is not present'
      index: 4.1.4
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example, chown root:root /etc/kubernetes/proxy.conf
      test_info: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example, chown root:root /etc/kubernetes/proxy.conf
      type: ""
    result: pass
    rule: Worker Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the --kubeconfig kubelet.conf file permissions are set to
      644 or more restrictive (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a
        /etc/kubernetes/kubelet.conf; fi'' '
      expected_result: '''permissions'' is present'
      index: 4.1.5
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chmod 644 /etc/kubernetes/kubelet.conf
      test_info: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chmod 644 /etc/kubernetes/kubelet.conf
      type: ""
    result: fail
    rule: Worker Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root
      (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G
        /etc/kubernetes/kubelet.conf; fi'' '
      expected_result: '''root:root'' is present'
      index: 4.1.6
      reason: ""
      remediation: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chown root:root /etc/kubernetes/kubelet.conf
      test_info: |
        Run the below command (based on the file location on your system) on the each worker node.
        For example,
        chown root:root /etc/kubernetes/kubelet.conf
      type: ""
    result: warn
    rule: Worker Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the certificate authorities file permissions are set to 644
      or more restrictive (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: |
        CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')
        if test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi
        if test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi
      expected_result: '''permissions'' is present'
      index: 4.1.7
      reason: ""
      remediation: |
        Run the following command to modify the file permissions of the
        --client-ca-file chmod 644 <filename>
      test_info: |
        Run the following command to modify the file permissions of the
        --client-ca-file chmod 644 <filename>
      type: ""
    result: warn
    rule: Worker Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the client certificate authorities file ownership is set
      to root:root (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: |
        CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')
        if test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi
        if test -e $CAFILE; then stat -c %U:%G $CAFILE; fi
      expected_result: '''root:root'' is present'
      index: 4.1.8
      reason: ""
      remediation: |
        Run the following command to modify the ownership of the --client-ca-file.
        chown root:root <filename>
      test_info: |
        Run the following command to modify the ownership of the --client-ca-file.
        chown root:root <filename>
      type: ""
    result: warn
    rule: Worker Node Configuration Files
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the kubelet --config configuration file has permissions set
      to 644 or more restrictive (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a
        /var/lib/kubelet/config.yaml; fi'' '
      expected_result: '''permissions'' is present'
      index: 4.1.9
      reason: ""
      remediation: |
        Run the following command (using the config file location identified in the Audit step)
        chmod 644 /var/lib/kubelet/config.yaml
      test_info: |
        Run the following command (using the config file location identified in the Audit step)
        chmod 644 /var/lib/kubelet/config.yaml
      type: ""
    result: fail
    rule: Worker Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Worker Node Configuration Files
    message: Ensure that the kubelet --config configuration file ownership is set
      to root:root (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: '/bin/sh -c ''if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G
        /var/lib/kubelet/config.yaml; fi'' '
      expected_result: '''root:root'' is present'
      index: 4.1.10
      reason: ""
      remediation: |
        Run the following command (using the config file location identified in the Audit step)
        chown root:root /var/lib/kubelet/config.yaml
      test_info: |
        Run the following command (using the config file location identified in the Audit step)
        chown root:root /var/lib/kubelet/config.yaml
      type: ""
    result: fail
    rule: Worker Node Configuration Files
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the anonymous-auth argument is set to false (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.1
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to
        false.
        If using executable arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --anonymous-auth=false
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to
        false.
        If using executable arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --anonymous-auth=false
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: fail
    rule: Kubelet
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --authorization-mode argument is not set to AlwaysAllow
      (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.2
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If
        using executable arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_AUTHZ_ARGS variable.
        --authorization-mode=Webhook
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If
        using executable arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_AUTHZ_ARGS variable.
        --authorization-mode=Webhook
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: fail
    rule: Kubelet
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --client-ca-file argument is set as appropriate (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.3
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to
        the location of the client CA file.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_AUTHZ_ARGS variable.
        --client-ca-file=<path/to/client-ca-file>
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to
        the location of the client CA file.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_AUTHZ_ARGS variable.
        --client-ca-file=<path/to/client-ca-file>
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: fail
    rule: Kubelet
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --read-only-port argument is set to 0 (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.4
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set readOnlyPort to 0.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --read-only-port=0
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set readOnlyPort to 0.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --read-only-port=0
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --streaming-connection-idle-timeout argument is not set
      to 0 (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.5
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a
        value other than 0.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --streaming-connection-idle-timeout=5m
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a
        value other than 0.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --streaming-connection-idle-timeout=5m
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --protect-kernel-defaults argument is set to true (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.6
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --protect-kernel-defaults=true
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set protectKernelDefaults: true.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        --protect-kernel-defaults=true
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: fail
    rule: Kubelet
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --make-iptables-util-chains argument is set to true (Automated)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.7
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        remove the --make-iptables-util-chains argument from the
        KUBELET_SYSTEM_PODS_ARGS variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        remove the --make-iptables-util-chains argument from the
        KUBELET_SYSTEM_PODS_ARGS variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: fail
    rule: Kubelet
    scored: true
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --hostname-override argument is not set (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: |-
        UID          PID    PPID  C STIME TTY          TIME CMD
        root       57620   56483  2 14:35 ?        00:04:27 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime=remote --container-runtime-endpoint=unix:///run/containerd/containerd.sock --fail-swap-on=false --node-ip=172.18.0.2 --provider-id=kind://docker/kind/kind-control-plane --fail-swap-on=false --cgroup-root=/kubelet
      audit: '/bin/ps -fC kubelet '
      expected_result: '''--hostname-override'' is not present'
      index: 4.2.8
      reason: ""
      remediation: |
        Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        on each worker node and remove the --hostname-override argument from the
        KUBELET_SYSTEM_PODS_ARGS variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        on each worker node and remove the --hostname-override argument from the
        KUBELET_SYSTEM_PODS_ARGS variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: pass
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --event-qps argument is set to 0 or a level which ensures
      appropriate event capture (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.9
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --tls-cert-file and --tls-private-key-file arguments
      are set as appropriate (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.10
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set tlsCertFile to the location
        of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile
        to the location of the corresponding private key file.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
        --tls-cert-file=<path/to/tls-certificate-file>
        --tls-private-key-file=<path/to/tls-key-file>
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set tlsCertFile to the location
        of the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile
        to the location of the corresponding private key file.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the below parameters in KUBELET_CERTIFICATE_ARGS variable.
        --tls-cert-file=<path/to/tls-certificate-file>
        --tls-private-key-file=<path/to/tls-key-file>
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the --rotate-certificates argument is not set to false (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.11
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to add the line rotateCertificates: true or
        remove it altogether to use the default value.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS
        variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to add the line rotateCertificates: true or
        remove it altogether to use the default value.
        If using command line arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        remove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS
        variable.
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Verify that the RotateKubeletServerCertificate argument is set to true
      (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.12
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.
        --feature-gates=RotateKubeletServerCertificate=true
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        Edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        on each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.
        --feature-gates=RotateKubeletServerCertificate=true
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: Kubelet
    message: Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers
      (Manual)
    policy: Worker Node Security Configuration
    properties:
      AuditConfig: /bin/cat /var/lib/kubelet/config.yaml
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: /bin/ps -fC kubelet
      expected_result: ""
      index: 4.2.13
      reason: 'failed to run: "/bin/cat /var/lib/kubelet/config.yaml", output: "/bin/cat:
        /var/lib/kubelet/config.yaml: No such file or directory\n", error: exit status
        1'
      remediation: |
        If using a Kubelet config file, edit the file to set TLSCipherSuites: to
        TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        or to a subset of these values.
        If using executable arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the --tls-cipher-suites parameter as follows, or to a subset of these values.
        --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      test_info: |
        If using a Kubelet config file, edit the file to set TLSCipherSuites: to
        TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        or to a subset of these values.
        If using executable arguments, edit the kubelet service file
        /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and
        set the --tls-cipher-suites parameter as follows, or to a subset of these values.
        --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256
        Based on your system, restart the kubelet service. For example:
        systemctl daemon-reload
        systemctl restart kubelet.service
      type: ""
    result: warn
    rule: Kubelet
    timestamp:
      nanos: 0
      seconds: 0
  - category: RBAC and Service Accounts
    message: Ensure that the cluster-admin role is only used where required (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.1.1
      reason: Test marked as a manual test
      remediation: |
        Identify all clusterrolebindings to the cluster-admin role. Check if they are used and
        if they need this role or if they could use a role with fewer privileges.
        Where possible, first bind users to a lower privileged role and then remove the
        clusterrolebinding to the cluster-admin role :
        kubectl delete clusterrolebinding [name]
      test_info: |
        Identify all clusterrolebindings to the cluster-admin role. Check if they are used and
        if they need this role or if they could use a role with fewer privileges.
        Where possible, first bind users to a lower privileged role and then remove the
        clusterrolebinding to the cluster-admin role :
        kubectl delete clusterrolebinding [name]
      type: manual
    result: warn
    rule: RBAC and Service Accounts
    timestamp:
      nanos: 0
      seconds: 0
  - category: RBAC and Service Accounts
    message: Minimize access to secrets (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.1.2
      reason: Test marked as a manual test
      remediation: |
        Where possible, remove get, list and watch access to secret objects in the cluster.
      test_info: |
        Where possible, remove get, list and watch access to secret objects in the cluster.
      type: manual
    result: warn
    rule: RBAC and Service Accounts
    timestamp:
      nanos: 0
      seconds: 0
  - category: RBAC and Service Accounts
    message: Minimize wildcard use in Roles and ClusterRoles (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.1.3
      reason: Test marked as a manual test
      remediation: |
        Where possible replace any use of wildcards in clusterroles and roles with specific
        objects or actions.
      test_info: |
        Where possible replace any use of wildcards in clusterroles and roles with specific
        objects or actions.
      type: manual
    result: warn
    rule: RBAC and Service Accounts
    timestamp:
      nanos: 0
      seconds: 0
  - category: RBAC and Service Accounts
    message: Minimize access to create pods (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.1.4
      reason: Test marked as a manual test
      remediation: |
        Where possible, remove create access to pod objects in the cluster.
      test_info: |
        Where possible, remove create access to pod objects in the cluster.
      type: manual
    result: warn
    rule: RBAC and Service Accounts
    timestamp:
      nanos: 0
      seconds: 0
  - category: RBAC and Service Accounts
    message: Ensure that default service accounts are not actively used. (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.1.5
      reason: Test marked as a manual test
      remediation: |
        Create explicit service accounts wherever a Kubernetes workload requires specific access
        to the Kubernetes API server.
        Modify the configuration of each default service account to include this value
        automountServiceAccountToken: false
      test_info: |
        Create explicit service accounts wherever a Kubernetes workload requires specific access
        to the Kubernetes API server.
        Modify the configuration of each default service account to include this value
        automountServiceAccountToken: false
      type: manual
    result: warn
    rule: RBAC and Service Accounts
    timestamp:
      nanos: 0
      seconds: 0
  - category: RBAC and Service Accounts
    message: Ensure that Service Account Tokens are only mounted where necessary (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.1.6
      reason: Test marked as a manual test
      remediation: |
        Modify the definition of pods and service accounts which do not need to mount service
        account tokens to disable it.
      test_info: |
        Modify the definition of pods and service accounts which do not need to mount service
        account tokens to disable it.
      type: manual
    result: warn
    rule: RBAC and Service Accounts
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of privileged containers (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.1
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that
        the .spec.privileged field is omitted or set to false.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that
        the .spec.privileged field is omitted or set to false.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers wishing to share the host process
      ID namespace (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.2
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.hostPID field is omitted or set to false.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.hostPID field is omitted or set to false.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers wishing to share the host IPC namespace
      (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.3
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.hostIPC field is omitted or set to false.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.hostIPC field is omitted or set to false.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers wishing to share the host network
      namespace (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.4
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.hostNetwork field is omitted or set to false.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.hostNetwork field is omitted or set to false.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers with allowPrivilegeEscalation (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.5
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.allowPrivilegeEscalation field is omitted or set to false.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.allowPrivilegeEscalation field is omitted or set to false.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of root containers (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.6
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of
        UIDs not including 0.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of
        UIDs not including 0.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers with the NET_RAW capability (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.7
      reason: Test marked as a manual test
      remediation: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.requiredDropCapabilities is set to include either NET_RAW or ALL.
      test_info: |
        Create a PSP as described in the Kubernetes documentation, ensuring that the
        .spec.requiredDropCapabilities is set to include either NET_RAW or ALL.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers with added capabilities (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.8
      reason: Test marked as a manual test
      remediation: |
        Ensure that allowedCapabilities is not present in PSPs for the cluster unless
        it is set to an empty array.
      test_info: |
        Ensure that allowedCapabilities is not present in PSPs for the cluster unless
        it is set to an empty array.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Pod Security Policies
    message: Minimize the admission of containers with capabilities assigned (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.2.9
      reason: Test marked as a manual test
      remediation: |
        Review the use of capabilites in applications runnning on your cluster. Where a namespace
        contains applicaions which do not require any Linux capabities to operate consider adding
        a PSP which forbids the admission of containers which do not drop all capabilities.
      test_info: |
        Review the use of capabilites in applications runnning on your cluster. Where a namespace
        contains applicaions which do not require any Linux capabities to operate consider adding
        a PSP which forbids the admission of containers which do not drop all capabilities.
      type: manual
    result: warn
    rule: Pod Security Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: Network Policies and CNI
    message: Ensure that the CNI in use supports Network Policies (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.3.1
      reason: Test marked as a manual test
      remediation: |
        If the CNI plugin in use does not support network policies, consideration should be given to
        making use of a different plugin, or finding an alternate mechanism for restricting traffic
        in the Kubernetes cluster.
      test_info: |
        If the CNI plugin in use does not support network policies, consideration should be given to
        making use of a different plugin, or finding an alternate mechanism for restricting traffic
        in the Kubernetes cluster.
      type: manual
    result: warn
    rule: Network Policies and CNI
    timestamp:
      nanos: 0
      seconds: 0
  - category: Network Policies and CNI
    message: Ensure that all Namespaces have Network Policies defined (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.3.2
      reason: Test marked as a manual test
      remediation: |
        Follow the documentation and create NetworkPolicy objects as you need them.
      test_info: |
        Follow the documentation and create NetworkPolicy objects as you need them.
      type: manual
    result: warn
    rule: Network Policies and CNI
    timestamp:
      nanos: 0
      seconds: 0
  - category: Secrets Management
    message: Prefer using secrets as files over secrets as environment variables (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.4.1
      reason: Test marked as a manual test
      remediation: |
        if possible, rewrite application code to read secrets from mounted secret files, rather than
        from environment variables.
      test_info: |
        if possible, rewrite application code to read secrets from mounted secret files, rather than
        from environment variables.
      type: manual
    result: warn
    rule: Secrets Management
    timestamp:
      nanos: 0
      seconds: 0
  - category: Secrets Management
    message: Consider external secret storage (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.4.2
      reason: Test marked as a manual test
      remediation: |
        Refer to the secrets management options offered by your cloud provider or a third-party
        secrets management solution.
      test_info: |
        Refer to the secrets management options offered by your cloud provider or a third-party
        secrets management solution.
      type: manual
    result: warn
    rule: Secrets Management
    timestamp:
      nanos: 0
      seconds: 0
  - category: Extensible Admission Control
    message: Configure Image Provenance using ImagePolicyWebhook admission controller
      (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.5.1
      reason: Test marked as a manual test
      remediation: |
        Follow the Kubernetes documentation and setup image provenance.
      test_info: |
        Follow the Kubernetes documentation and setup image provenance.
      type: manual
    result: warn
    rule: Extensible Admission Control
    timestamp:
      nanos: 0
      seconds: 0
  - category: General Policies
    message: Create administrative boundaries between resources using namespaces (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.7.1
      reason: Test marked as a manual test
      remediation: |
        Follow the documentation and create namespaces for objects in your deployment as you need
        them.
      test_info: |
        Follow the documentation and create namespaces for objects in your deployment as you need
        them.
      type: manual
    result: warn
    rule: General Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: General Policies
    message: Ensure that the seccomp profile is set to docker/default in your pod
      definitions (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.7.2
      reason: Test marked as a manual test
      remediation: |
        Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you
        would need to enable alpha features in the apiserver by passing "--feature-
        gates=AllAlpha=true" argument.
        Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS
        parameter to "--feature-gates=AllAlpha=true"
        KUBE_API_ARGS="--feature-gates=AllAlpha=true"
        Based on your system, restart the kube-apiserver service. For example:
        systemctl restart kube-apiserver.service
        Use annotations to enable the docker/default seccomp profile in your pod definitions. An
        example is as below:
        apiVersion: v1
        kind: Pod
        metadata:
          name: trustworthy-pod
          annotations:
            seccomp.security.alpha.kubernetes.io/pod: docker/default
        spec:
          containers:
            - name: trustworthy-container
              image: sotrustworthy:latest
      test_info: |
        Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you
        would need to enable alpha features in the apiserver by passing "--feature-
        gates=AllAlpha=true" argument.
        Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS
        parameter to "--feature-gates=AllAlpha=true"
        KUBE_API_ARGS="--feature-gates=AllAlpha=true"
        Based on your system, restart the kube-apiserver service. For example:
        systemctl restart kube-apiserver.service
        Use annotations to enable the docker/default seccomp profile in your pod definitions. An
        example is as below:
        apiVersion: v1
        kind: Pod
        metadata:
          name: trustworthy-pod
          annotations:
            seccomp.security.alpha.kubernetes.io/pod: docker/default
        spec:
          containers:
            - name: trustworthy-container
              image: sotrustworthy:latest
      type: manual
    result: warn
    rule: General Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: General Policies
    message: Apply Security Context to Your Pods and Containers (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.7.3
      reason: Test marked as a manual test
      remediation: |
        Follow the Kubernetes documentation and apply security contexts to your pods. For a
        suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker
        Containers.
      test_info: |
        Follow the Kubernetes documentation and apply security contexts to your pods. For a
        suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker
        Containers.
      type: manual
    result: warn
    rule: General Policies
    timestamp:
      nanos: 0
      seconds: 0
  - category: General Policies
    message: The default namespace should not be used (Manual)
    policy: Kubernetes Policies
    properties:
      AuditConfig: ""
      AuditEnv: ""
      IsMultiple: "false"
      actual_value: ""
      audit: ""
      expected_result: ""
      index: 5.7.4
      reason: Test marked as a manual test
      remediation: |
        Ensure that namespaces are created to allow for appropriate segregation of Kubernetes
        resources and that all new resources are created in a specific namespace.
      test_info: |
        Ensure that namespaces are created to allow for appropriate segregation of Kubernetes
        resources and that all new resources are created in a specific namespace.
      type: manual
    result: warn
    rule: General Policies
    timestamp:
      nanos: 0
      seconds: 0
  summary:
    error: 0
    fail: 36
    pass: 37
    skip: 0
    warn: 49
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
